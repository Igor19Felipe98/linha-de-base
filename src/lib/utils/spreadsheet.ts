import * as XLSX from 'xlsx';
import { WorkPackage, StopPeriod, PartialReductionPeriod, LearningCurve } from '@/lib/types';

// Interfaces para dados de planilha
export interface ConfigSpreadsheetData {
  dadosBasicos: {
    quantidadeCasas: number;
    dataInicio: string; // formato DD/MM/AAAA
  };
  periodosParada: Array<{
    mes: string;
    descricao?: string;
  }>;
  periodosReducao: Array<{
    mes: string;
    coeficiente: number;
    descricao?: string;
  }>;
  curvaAprendizado: {
    redutorInicial: number;
    incrementoPorPeriodo: number;
    periodoSemanas: number;
    multiplicadorDuracao: number;
    semanasImpactadas: number;
    pacotesAplicados?: string; // lista separada por v√≠rgula
  };
}

export interface PackagesSpreadsheetData {
  pacotes: Array<{
    nome: string;
    duracaoSemanas: number;
    ritmo: number;
    latenciaSemanas: number;
    custo: number;
  }>;
}

// Fun√ß√£o para gerar planilha modelo de configura√ß√µes
export function generateConfigTemplate(): Uint8Array {
  const wb = XLSX.utils.book_new();

  // Aba 1: Dados B√°sicos
  const dadosBasicos = [
    ['Campo', 'Valor', 'Observa√ß√µes'],
    ['Quantidade de Casas', 100, 'N√∫mero entre 1 e 10000'],
    ['Data de In√≠cio', '06/01/2025', 'Formato DD/MM/AAAA - deve ser segunda-feira']
  ];

  const ws1 = XLSX.utils.aoa_to_sheet(dadosBasicos);
  
  // Formatar a c√©lula da data como texto
  if (!ws1['!cols']) ws1['!cols'] = [];
  ws1['!cols'][1] = { wch: 15 }; // largura da coluna
  
  // For√ßar a c√©lula B3 (Data de In√≠cio) como texto
  if (ws1['B3']) {
    ws1['B3'].t = 's'; // tipo string
    ws1['B3'].z = '@'; // formato texto
  }
  
  XLSX.utils.book_append_sheet(wb, ws1, 'Dados B√°sicos');

  // Aba 2: Per√≠odos de Parada
  const periodosParada = [
    ['M√™s', 'Descri√ß√£o'],
    ['janeiro', 'Exemplo: Festividades de ano novo'],
    ['dezembro', 'Exemplo: Festividades de fim de ano']
  ];

  const ws2 = XLSX.utils.aoa_to_sheet(periodosParada);
  XLSX.utils.book_append_sheet(wb, ws2, 'Per√≠odos Parada');

  // Aba 3: Per√≠odos de Redu√ß√£o
  const periodosReducao = [
    ['M√™s', 'Coeficiente', 'Descri√ß√£o'],
    ['fevereiro', 0.7, 'Exemplo: Carnaval - 70% da produtividade'],
    ['julho', 0.8, 'Exemplo: F√©rias escolares - 80% da produtividade']
  ];

  const ws3 = XLSX.utils.aoa_to_sheet(periodosReducao);
  XLSX.utils.book_append_sheet(wb, ws3, 'Per√≠odos Redu√ß√£o');

  // Aba 4: Curva de Aprendizado
  const curvaAprendizado = [
    ['Par√¢metro', 'Valor', 'Descri√ß√£o'],
    ['Redutor Inicial', 0.6, 'Fator de redu√ß√£o inicial (ex: 0.60 = 60%)'],
    ['Incremento por Per√≠odo', 0.2, 'Melhoria a cada per√≠odo (ex: 0.20 = +20%)'],
    ['Per√≠odo (semanas)', 4, 'Dura√ß√£o de cada per√≠odo de melhoria'],
    ['Multiplicador de Dura√ß√£o', 2.0, 'Fator de dura√ß√£o inicial (ex: 2.0 = dobro do tempo)'],
    ['Semanas Impactadas', 6, 'Semanas afetadas na curva de dura√ß√£o'],
    ['Pacotes Aplicados', '', 'Nomes dos pacotes separados por v√≠rgula (vazio = todos)']
  ];

  const ws4 = XLSX.utils.aoa_to_sheet(curvaAprendizado);
  XLSX.utils.book_append_sheet(wb, ws4, 'Curva Aprendizado');

  // Aba 5: Instru√ß√µes
  const instrucoes = [
    ['INSTRU√á√ïES PARA PREENCHIMENTO'],
    [''],
    ['1. DADOS B√ÅSICOS:'],
    ['   - Preencha apenas a coluna "Valor"'],
    ['   - Data deve estar no formato DD/MM/AAAA'],
    ['   - Data deve ser uma segunda-feira'],
    [''],
    ['2. PER√çODOS DE PARADA:'],
    ['   - Liste os meses com parada total (coeficiente 0)'],
    ['   - Use nomes de meses em min√∫sculo'],
    ['   - Descri√ß√£o √© opcional'],
    [''],
    ['3. PER√çODOS DE REDU√á√ÉO:'],
    ['   - Liste os meses com produtividade reduzida'],
    ['   - Coeficiente entre 0.01 e 0.99'],
    ['   - Use nomes de meses em min√∫sculo'],
    [''],
    ['4. CURVA DE APRENDIZADO:'],
    ['   - Preencha apenas a coluna "Valor"'],
    ['   - Para "Pacotes Aplicados", liste nomes separados por v√≠rgula'],
    ['   - Se vazio, ser√° aplicado a todos os pacotes'],
    [''],
    ['5. AP√ìS PREENCHER:'],
    ['   - Salve o arquivo'],
    ['   - Fa√ßa upload na p√°gina de configura√ß√µes'],
    ['   - O sistema validar√° os dados automaticamente']
  ];

  const ws5 = XLSX.utils.aoa_to_sheet(instrucoes);
  XLSX.utils.book_append_sheet(wb, ws5, 'Instru√ß√µes');

  return new Uint8Array(XLSX.write(wb, { bookType: 'xlsx', type: 'array' }));
}

// Fun√ß√£o para gerar planilha modelo de pacotes
export function generatePackagesTemplate(): Uint8Array {
  const wb = XLSX.utils.book_new();

  // Aba 1: Pacotes de Trabalho
  const pacotes = [
    ['Nome', 'Dura√ß√£o (semanas)', 'Ritmo (casas/semana)', 'Lat√™ncia (semanas)', 'Custo (R$)'],
    ['', '', '', '', ''],
    ['EXEMPLOS (delete as linhas abaixo):', '', '', '', ''],
    ['Funda√ß√£o', 2, 5, 0, 25000],
    ['Estrutura', 3, 3, 1, 45000],
    ['Alvenaria', 4, 4, 2, 35000],
    ['Cobertura', 2, 2, 1, 20000],
    ['Acabamento', 6, 2, 3, 55000]
  ];

  const ws1 = XLSX.utils.aoa_to_sheet(pacotes);
  
  // Formata√ß√£o da planilha
  if (!ws1['!cols']) ws1['!cols'] = [];
  ws1['!cols'][0] = { wch: 20 }; // Nome
  ws1['!cols'][1] = { wch: 18 }; // Dura√ß√£o
  ws1['!cols'][2] = { wch: 20 }; // Ritmo
  ws1['!cols'][3] = { wch: 18 }; // Lat√™ncia
  ws1['!cols'][4] = { wch: 15 }; // Custo
  
  // Destacar linha de exemplos
  if (ws1['A3']) {
    ws1['A3'].s = { font: { bold: true, color: { rgb: "FF0000" } } };
  }
  
  XLSX.utils.book_append_sheet(wb, ws1, 'Pacotes');

  // Aba 2: Instru√ß√µes
  const instrucoes = [
    ['INSTRU√á√ïES PARA PREENCHIMENTO DA PLANILHA DE PACOTES'],
    [''],
    ['COMO PREENCHER:'],
    [''],
    ['1. V√° para a aba "Pacotes"'],
    ['2. Delete a linha "EXEMPLOS (delete as linhas abaixo):" e todas as linhas de exemplo'],
    ['3. Na linha 2, comece a preencher seus pacotes reais'],
    ['4. Preencha uma linha para cada pacote do seu projeto'],
    [''],
    ['CAMPOS OBRIGAT√ìRIOS:'],
    [''],
    ['üìã NOME:'],
    ['   ‚Ä¢ Nome do pacote de trabalho (ex: "Funda√ß√£o", "Estrutura")'],
    ['   ‚Ä¢ Deve ser √∫nico (n√£o repetir nomes)'],
    ['   ‚Ä¢ Evite caracteres especiais'],
    [''],
    ['‚è±Ô∏è DURA√á√ÉO (SEMANAS):'],
    ['   ‚Ä¢ Tempo para completar o pacote em UMA casa'],
    ['   ‚Ä¢ Exemplos: 2 = duas semanas, 1.5 = uma semana e meia'],
    ['   ‚Ä¢ Deve ser maior que 0'],
    [''],
    ['üèóÔ∏è RITMO (CASAS/SEMANA):'],
    ['   ‚Ä¢ Quantas casas podem INICIAR o pacote simultaneamente por semana'],
    ['   ‚Ä¢ Exemplo: 5 = podem iniciar 5 casas por semana'],
    ['   ‚Ä¢ Deve ser n√∫mero inteiro maior que 0'],
    [''],
    ['‚è≥ LAT√äNCIA (SEMANAS):'],
    ['   ‚Ä¢ Tempo de espera entre o fim deste pacote e in√≠cio do pr√≥ximo'],
    ['   ‚Ä¢ Exemplo: 1 = esperar 1 semana para iniciar pr√≥ximo pacote'],
    ['   ‚Ä¢ Pode ser 0 (sem espera)'],
    [''],
    ['üí∞ CUSTO (R$):'],
    ['   ‚Ä¢ Custo do pacote por casa'],
    ['   ‚Ä¢ Apenas n√∫meros (ex: 25000, n√£o R$ 25.000,00)'],
    ['   ‚Ä¢ Deve ser maior que 0'],
    [''],
    ['EXEMPLO PR√ÅTICO:'],
    ['Nome: "Funda√ß√£o" | Dura√ß√£o: 2 | Ritmo: 5 | Lat√™ncia: 0 | Custo: 25000'],
    ['Significa: Cada casa leva 2 semanas para fazer a funda√ß√£o,'],
    ['podem iniciar 5 casas por semana, n√£o h√° espera para pr√≥ximo pacote,'],
    ['e custa R$ 25.000 por casa.'],
    [''],
    ['DICAS IMPORTANTES:'],
    [''],
    ['‚Ä¢ Os pacotes s√£o executados na ORDEM listada na planilha'],
    ['‚Ä¢ N√£o deixe linhas vazias entre os pacotes'],
    ['‚Ä¢ Salve o arquivo antes de fazer upload'],
    ['‚Ä¢ O sistema ir√° validar automaticamente todos os dados']
  ];

  const ws2 = XLSX.utils.aoa_to_sheet(instrucoes);
  XLSX.utils.book_append_sheet(wb, ws2, 'Instru√ß√µes');

  return new Uint8Array(XLSX.write(wb, { bookType: 'xlsx', type: 'array' }));
}

// Fun√ß√£o para processar planilha de configura√ß√µes
export function parseConfigSpreadsheet(file: File): Promise<ConfigSpreadsheetData> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = (e) => {
      try {
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });

        const result: ConfigSpreadsheetData = {
          dadosBasicos: {
            quantidadeCasas: 0,
            dataInicio: ''
          },
          periodosParada: [],
          periodosReducao: [],
          curvaAprendizado: {
            redutorInicial: 0.6,
            incrementoPorPeriodo: 0.2,
            periodoSemanas: 4,
            multiplicadorDuracao: 2.0,
            semanasImpactadas: 6
          }
        };

        // Processar Dados B√°sicos
        if (workbook.SheetNames.includes('Dados B√°sicos')) {
          const ws = workbook.Sheets['Dados B√°sicos'];
          const jsonData = XLSX.utils.sheet_to_json(ws, { header: 1 }) as any[][];
          
          for (let i = 1; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row[0] === 'Quantidade de Casas' && row[1]) {
              result.dadosBasicos.quantidadeCasas = Number(row[1]);
            }
            if (row[0] === 'Data de In√≠cio' && row[1]) {
              // Normalizar formato da data
              let dateStr = String(row[1]).trim();
              
              // Se vier como n√∫mero (formato de data do Excel), converter
              if (!isNaN(Number(dateStr)) && Number(dateStr) > 40000) {
                // √â uma data serial do Excel, converter para DD/MM/AAAA
                const excelDate = new Date((Number(dateStr) - 25569) * 86400 * 1000);
                const day = String(excelDate.getDate()).padStart(2, '0');
                const month = String(excelDate.getMonth() + 1).padStart(2, '0');
                const year = excelDate.getFullYear();
                dateStr = `${day}/${month}/${year}`;
              }
              
              // Se vier no formato AAAA-MM-DD, converter para DD/MM/AAAA
              if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
                const [year, month, day] = dateStr.split('-');
                dateStr = `${day}/${month}/${year}`;
              }
              
              result.dadosBasicos.dataInicio = dateStr;
            }
          }
        }

        // Processar Per√≠odos de Parada
        if (workbook.SheetNames.includes('Per√≠odos Parada')) {
          const ws = workbook.Sheets['Per√≠odos Parada'];
          const jsonData = XLSX.utils.sheet_to_json(ws, { header: 1 }) as any[][];
          
          for (let i = 1; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row[0] && row[0].trim()) {
              result.periodosParada.push({
                mes: String(row[0]).toLowerCase().trim(),
                descricao: row[1] ? String(row[1]) : undefined
              });
            }
          }
        }

        // Processar Per√≠odos de Redu√ß√£o
        if (workbook.SheetNames.includes('Per√≠odos Redu√ß√£o')) {
          const ws = workbook.Sheets['Per√≠odos Redu√ß√£o'];
          const jsonData = XLSX.utils.sheet_to_json(ws, { header: 1 }) as any[][];
          
          for (let i = 1; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row[0] && row[0].trim() && row[1] !== undefined) {
              result.periodosReducao.push({
                mes: String(row[0]).toLowerCase().trim(),
                coeficiente: Number(row[1]),
                descricao: row[2] ? String(row[2]) : undefined
              });
            }
          }
        }

        // Processar Curva de Aprendizado
        if (workbook.SheetNames.includes('Curva Aprendizado')) {
          const ws = workbook.Sheets['Curva Aprendizado'];
          const jsonData = XLSX.utils.sheet_to_json(ws, { header: 1 }) as any[][];
          
          for (let i = 1; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row[0] && row[1] !== undefined) {
              const param = String(row[0]);
              const valor = row[1];
              
              switch (param) {
                case 'Redutor Inicial':
                  result.curvaAprendizado.redutorInicial = Number(valor);
                  break;
                case 'Incremento por Per√≠odo':
                  result.curvaAprendizado.incrementoPorPeriodo = Number(valor);
                  break;
                case 'Per√≠odo (semanas)':
                  result.curvaAprendizado.periodoSemanas = Number(valor);
                  break;
                case 'Multiplicador de Dura√ß√£o':
                  result.curvaAprendizado.multiplicadorDuracao = Number(valor);
                  break;
                case 'Semanas Impactadas':
                  result.curvaAprendizado.semanasImpactadas = Number(valor);
                  break;
                case 'Pacotes Aplicados':
                  result.curvaAprendizado.pacotesAplicados = valor ? String(valor) : undefined;
                  break;
              }
            }
          }
        }

        resolve(result);
      } catch (error) {
        reject(new Error(`Erro ao processar planilha: ${error}`));
      }
    };

    reader.onerror = () => reject(new Error('Erro ao ler arquivo'));
    reader.readAsArrayBuffer(file);
  });
}

// Fun√ß√£o para processar planilha de pacotes
export function parsePackagesSpreadsheet(file: File): Promise<PackagesSpreadsheetData> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = (e) => {
      try {
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });

        const result: PackagesSpreadsheetData = {
          pacotes: []
        };

        // Processar Pacotes
        if (workbook.SheetNames.includes('Pacotes')) {
          const ws = workbook.Sheets['Pacotes'];
          const jsonData = XLSX.utils.sheet_to_json(ws, { header: 1 }) as any[][];
          
          for (let i = 1; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row[0] && row[0].trim()) {
              result.pacotes.push({
                nome: String(row[0]).trim(),
                duracaoSemanas: Number(row[1]) || 1,
                ritmo: Number(row[2]) || 1,
                latenciaSemanas: Number(row[3]) || 0,
                custo: Number(row[4]) || 0
              });
            }
          }
        }

        resolve(result);
      } catch (error) {
        reject(new Error(`Erro ao processar planilha: ${error}`));
      }
    };

    reader.onerror = () => reject(new Error('Erro ao ler arquivo'));
    reader.readAsArrayBuffer(file);
  });
}

// Fun√ß√£o para download de arquivo
export function downloadFile(data: Uint8Array, filename: string) {
  const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

// Fun√ß√£o para validar dados de configura√ß√£o importados
export function validateConfigData(data: ConfigSpreadsheetData): string[] {
  const errors: string[] = [];

  // Validar dados b√°sicos
  if (!data.dadosBasicos.quantidadeCasas || data.dadosBasicos.quantidadeCasas <= 0) {
    errors.push('Quantidade de casas deve ser maior que 0');
  }
  if (data.dadosBasicos.quantidadeCasas > 10000) {
    errors.push('Quantidade de casas n√£o pode ser maior que 10000');
  }
  
  // Validar data de in√≠cio
  if (!data.dadosBasicos.dataInicio) {
    errors.push('Data de in√≠cio √© obrigat√≥ria');
  } else {
    const dateStr = data.dadosBasicos.dataInicio.trim();
    if (!dateStr.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
      errors.push('Data de in√≠cio deve estar no formato DD/MM/AAAA');
    } else {
      // Validar se √© uma data v√°lida
      const [day, month, year] = dateStr.split('/').map(Number);
      const date = new Date(year, month - 1, day);
      
      if (date.getFullYear() !== year || 
          date.getMonth() !== month - 1 || 
          date.getDate() !== day) {
        errors.push('Data de in√≠cio inv√°lida');
      } else if (date.getDay() !== 1) {
        // Verificar se √© segunda-feira (0 = domingo, 1 = segunda)
        errors.push('Data de in√≠cio deve ser uma segunda-feira');
      }
    }
  }

  // Validar per√≠odos de redu√ß√£o
  data.periodosReducao.forEach((periodo, index) => {
    if (periodo.coeficiente <= 0 || periodo.coeficiente >= 1) {
      errors.push(`Per√≠odo de redu√ß√£o ${index + 1}: coeficiente deve estar entre 0.01 e 0.99`);
    }
  });

  // Validar curva de aprendizado
  if (data.curvaAprendizado.redutorInicial <= 0 || data.curvaAprendizado.redutorInicial > 1) {
    errors.push('Redutor inicial deve estar entre 0.01 e 1');
  }
  if (data.curvaAprendizado.incrementoPorPeriodo < 0 || data.curvaAprendizado.incrementoPorPeriodo > 0.5) {
    errors.push('Incremento por per√≠odo deve estar entre 0 e 0.5');
  }
  if (data.curvaAprendizado.periodoSemanas < 1 || data.curvaAprendizado.periodoSemanas > 12) {
    errors.push('Per√≠odo deve estar entre 1 e 12 semanas');
  }

  return errors;
}

// Fun√ß√£o para validar dados de pacotes importados
export function validatePackagesData(data: PackagesSpreadsheetData): string[] {
  const errors: string[] = [];

  if (data.pacotes.length === 0) {
    errors.push('Pelo menos um pacote deve ser definido');
  }

  data.pacotes.forEach((pacote, index) => {
    if (!pacote.nome || pacote.nome.trim() === '') {
      errors.push(`Pacote ${index + 1}: nome √© obrigat√≥rio`);
    }
    if (pacote.duracaoSemanas <= 0) {
      errors.push(`Pacote ${index + 1}: dura√ß√£o deve ser maior que 0`);
    }
    if (pacote.ritmo <= 0 || !Number.isInteger(pacote.ritmo)) {
      errors.push(`Pacote ${index + 1}: ritmo deve ser um n√∫mero inteiro maior que 0`);
    }
    if (pacote.latenciaSemanas < 0) {
      errors.push(`Pacote ${index + 1}: lat√™ncia n√£o pode ser negativa`);
    }
    if (pacote.custo < 0) {
      errors.push(`Pacote ${index + 1}: custo n√£o pode ser negativo`);
    }
  });

  // Verificar nomes duplicados
  const nomes = data.pacotes.map(p => p.nome.toLowerCase());
  const nomesDuplicados = nomes.filter((nome, index) => nomes.indexOf(nome) !== index);
  if (nomesDuplicados.length > 0) {
    errors.push('Nomes de pacotes devem ser √∫nicos');
  }

  return errors;
}